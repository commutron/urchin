export function downSigma(filenameState, yamBulkState) {
  const h = yamBulkState;
  
  if(!h) { return null }
  /*
    topTitle, subTitle, 
    
    bX, bY, bT, orginX, orginY, zDeg, pcbHt, preplcTp, preplcBm,
    
    gBadX, gBadY,
    gBadModeLocal, // bad mark mode
    gBadImgLocal, // image/color 0=black 1=white
    gBadModeOvrll, // overall pcb bbr mode
    gBadSqnc, // sequence 0=badmark 1= recog 2=global
    gBadImgOvrll, // overall image/color 0=black 1=white
    
    recEnable, recPoints, recImage,
    gFid1x, gFid1y, gFid1m, gFid2x, gFid2y, gFid2m, gFid3x, gFid3y, gFid3m,
    
    fmarkRaw, // [D1] [D2] [window] [image 0=bright] [level 0=high]
    
    inUseParts, 
    
    iFidEnbl, iFid1x, iFid1y, iFid1m, iFid2x, iFid2y, iFid2m,
    
    lBadX, lBadY,
    
    pDataMap, // [0=symbol] [1=x] [2=y] [3=theta] [4=partnum] [5=control]
    
    oDataPlain // [0=x] [1=y] [2=theta] [3=control]
  */
  
  const pad = (val, s, e, y)=> {
    const ap = Number(val) < 0 ? "-" : "+";
    if(y) {
      return ap + Number.parseFloat(Math.abs(val)).toFixed(e).toString().padStart(s, "0");
    }else{
      return Number.parseFloat(val).toFixed(e || 0).toString().padStart(s, "0");
    }
  };


  const isodate = new Date().toISOString().slice(0,10).replaceAll("-", "");

  const first_line = `${filenameState},${isodate} 160840,0037,0001,SMT,NR,0000,00001,0000,0,0,0000,00000000,00000000\n`;

  const filePath = "H:" + "\\" + "ntdata" + "\\" + "library" + "\\" + "Yahama";

  const line_opsw = `:LINE-OPSW\n0201000000000000000000000000000000000000000000000000000000000000\n`;

  const machine = `:MACHINE\n01,1,NR,-\n01,2,NR,-\n`;

  const machine_op_1 = `:MACHINE-OP\n01,1,0561113100100000000010010000000000000000000000000000000000000000000000000000000000000000000000000000000004400000000100000000011000000101000000000000000001000000000000000000010000000000000000000000000000000000000000000000010000000000000000000000000000000000,0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100110000006600000000000000000000100000000000001111000000000000000000000000000000000000000000000000000000,0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0011100040110000000000000000000000000000000000000000000000000000000300000000300000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n`
  
  const machine_op_2 = `01,2,1000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n`;

  const l_common = `:L-COMMON\n${h.topTitle},${h.subTitle},\n,,\nSMTx Conversion,\n0\n0,\n`;

  const l_board = `:L-BOARD\n${pad(h.bX,8,3)},${pad(h.bY,7,3)},${pad(h.bT,6,3)},1,00.000\n${pad(h.orginX,8,3,1)},${pad(h.orginY,7,3,1)},${pad(h.zDeg,6,2,1)},+000.00,0,0,0\n${pad(h.pcbHt,5,3,1)},00.000,00.000\n`;

  const l_bbr = `:L-BBR\n${h.gBadModeLocal},1,125,1.0,1,1,0,1,0,1,2\n${h.gBadModeOvrll},${pad(h.gBadX,8,3,1)},${pad(h.gBadY,7,3,1)},125,1.0,1,1,0,0\n`;

  const l_recog = `:L-RECOG\n${h.recEnable},${h.recImage},0,0,000,0\n${h.recPoints},${pad(h.gFid1x,8,3,1)},${pad(h.gFid1y,7,3,1)},${h.gFid1m},${pad(h.gFid2x,8,3,1)},${pad(h.gFid2y,7,3,1)},${h.gFid2m},${pad(h.gFid3x,8,3,1)},${pad(h.gFid3y,7,3,1)},${h.gFid3m}\n0,+0000.000,+000.000,01,+0000.000,+000.000,01,+0000.000,+000.000,01\n0,+0000.000,+000.000,01,+0000.000,+000.000,01,+0000.000,+000.000,01\n0,+0000.000,+000.000,01,+0000.000,+000.000,01,+0000.000,+000.000,01\n0,+0000.000,+000.000,01,+0000.000,+000.000,01,+0000.000,+000.000,01\n`;

  const l_mark = `:L-MARK\n${h.fmarkRaw.map((m, i)=> `${pad(i,2)},${m[0]},${m[1]},0.00,${m[2]},${m[3]},${m[4]},270.00,01,01,00,0\n` ).join('')}`;

  const l_setup_blank = `:L-SETUP\n2,-267.500,0,0,0,0,0\n`;

  const l_ope_blank = `:L-OPE\n0\n0,00,00,+00.000,+00.000,0000,0000,0240,0000,0000,0200\n0,00,00,+00.000,+00.000,0000,0000,0240,0000,0000,0200\n0.000,1,000.000,0,0\n`;

  const l_pcb_h_blank = `:L-PCB-H\n0,-1.000,+1.000\n0,-1.000,+1.000\n`;

  const l_back_pin_blank = `:L-BACK-PIN\n,\n0,20\n`;

  const l_bc_blank = `:L-BC-COMMON\n001,255,001,255,001,255,001,255,0\n+0000.000,+000.000,00,+0000.000,+000.000,00,+0000.000,+000.000,00,+0000.000,+000.000,00\n+0000.000,+000.000,00,+0000.000,+000.000,00,+0000.000,+000.000,00,+0000.000,+000.000,00\n0,0,1\n:L-BC-PRM\n1,01\n:L-BC-MARK\n0,13000,03000,03000,01,01,0,1,1,1,1\n0,13000,03000,03000,01,01,0,1,1,1,1\n0,13000,03000,03000,01,01,0,1,1,1,1\n0,13000,03000,03000,01,01,0,1,1,1,1\n0,13000,03000,03000,01,01,0,1,1,1,1\n0,13000,03000,03000,01,01,0,1,1,1,1\n0,13000,03000,03000,01,01,0,1,1,1,1\n0,13000,03000,03000,01,01,0,1,1,1,1\n`;

  const m_ope = `:M-OPE\n01,0,3,0,${pad(h.preplcTp,5,3)},${pad(h.preplcBm,5,3)},0,0,0.200,2,-267.500,0,1,156,150,315,0,0,0\n`;

  const m_speed_blank = `:M-SPEED1\n01,0,0800,0080,0.250,0350,+10.000,0350,+05.000,00,+10.000,+10.000\n:M-SPEED2\n01,0,0800,0080,0.250\n:M-SPEED3\n01,0,0800,0080,0.250,0350,+05.000,0350,+10.000,00,+10.000,+10.000\n`;

  const m_locate_blank = `:M-LOCATE1\n01,0,0\n:M-LOCATE2\n01,0,00,00,+00.000,+00.000,0000,0000,0240,0000,0000,0200,0,00,00,+0.000,+0.000,0000,0000,0,0,00,00,00,00,0000,0240,0,+0.000\n:M-LOCATE3\n01,0,00,00,+00.000,+00.000,0000,0000,0240,0000,0000,0200,0,00,00,+0.000,+0.000,0000,0000,0,0,00,00,00,00,0000,0240,0,+0.000\n`;

  const m_noz_blank = `:M-NOZ\n01,1,,,,,,,,,,,,,,,,,\n01,2,,,,,,,,,,,,,,,,,\n01,3,,,,,,,,,,,,,,,,,\n01,4,,,,,,,,,,,,,,,,,\n:M-NOZ-AS1\n01,1,,,,,,,,,,,,,,,,,\n01,2,,,,,,,,,,,,,,,,,\n01,3,,,,,,,,,,,,,,,,,\n01,4,,,,,,,,,,,,,,,,,\n:M-NOZ-AS2\n01,1,,,,,,,,,,,,,,,,,\n01,2,,,,,,,,,,,,,,,,,\n01,3,,,,,,,,,,,,,,,,,\n01,4,,,,,,,,,,,,,,,,,\n:M-STK\n01,1,1,,,,,,,,,,,,,,,,,\n01,1,2,,,,,,,,,,,,,,,,,\n01,1,3,,,,,,,,,,,,,,,,,\n01,1,4,,,,,,,,,,,,,,,,,\n01,2,1,,,,,,,,,,,,,,,,,\n01,2,2,,,,,,,,,,,,,,,,,\n01,2,3,,,,,,,,,,,,,,,,,\n01,2,4,,,,,,,,,,,,,,,,,\n01,3,1,,,,,,,,,,,,,,,,,\n01,3,2,,,,,,,,,,,,,,,,,\n01,3,3,,,,,,,,,,,,,,,,,\n01,3,4,,,,,,,,,,,,,,,,,\n01,4,1,,,,,,,,,,,,,,,,,\n01,4,2,,,,,,,,,,,,,,,,,\n01,4,3,,,,,,,,,,,,,,,,,\n01,4,4,,,,,,,,,,,,,,,,,\n`;

  const cmpnt_list = h.inUseParts.map( (p, i)=> [ pad(i+1,4,0), p ] );
  const l_cmpnt = `:L-CMPNT\n` + cmpnt_list.map( (c)=> `${c[0]},${c[1]},,-,\n` ).join("");

  const feeder_blank = `:FEEDER\n`; // 01,1,00,003,0016,0,0000,-,,1,0,00.00,00.00,00

  const tray_to_waste_blank = `:TRAY\n:T-CTRL\n01,1,0,15,15\n01,2,0,15,15\n:T-STEP\n:VIB-STICK\n:VIB-ESCAPE\n01,1,1,1,1,1,1\n01,2,1,1,1,1,1\n:WASTE-DSP\n0,+0000.000,+000.000,+000.00,+0.000,,S\n`;


  const image_fids = `+0000.000,+000.000,+000.00,+0.000,-,${h.iFidEnbl},${pad(h.iFid1x,8,3,1)},${pad(h.iFid1y,7,3,1)},${pad(h.iFid2x,8,3,1)},${pad(h.iFid2y,7,3,1)},${h.iFid1m},${h.iFid2m},1,+0000.000,+000.000,01,+0000.000,+000.000,01,+0000.000,+000.000,01,00000,,\n`;

  const image_bbr = !h.lBadX && !h.lBadY ? "" : `${pad(h.lBadX,8,3,1)},${pad(h.lBadY,7,3,1)},+000.00,+0.000,0000,B,00,01,1,0000,00,0,0000,00,+0000.000,+000.000,+0000.000,+000.000,01,01,,,00001,-,01,1,0003,00,0,0000,00,0,0000,00,0,0000\n`;
  
  const hasOffsets = h.oDataPlain && h.oDataPlain.length > 0;
  const lnAdd = image_bbr === "" ? 1 : 2;
  
  const place = (h.pDataMap || []).map( (p, i)=> {
    const cnum = cmpnt_list.find( l => l[1] === p[4] )?.[0] || "0000";

    return `${pad(p[1],8,3,1)},${pad(p[2],7,3,1)},${pad(p[3],6,2,1)},+0.000,${cnum},${p[5]},00,01,1,0000,00,0,0000,00,+0000.000,+000.000,+0000.000,+000.000,01,01,${p[0]},,${pad(i+lnAdd,5,0)},-,01,1,0000,00,0,0000,00,0,0000,00,0,0000\n`;
  });
  const place_text = place.join("");

  const end_sym = hasOffsets ? "P" : "E";
  const end_line = `+0000.000,+000.000,+000.00,+0.000,0000,${end_sym},00,00,0,0000,00,0,0000,00,+0000.000,+000.000,+0000.000,+000.000,01,01,,,${pad(place.length+1,5,0)},-,00,0,0000,00,0,0000,00,0,0000,00,0,0000\n`;

  const p_dat = `:P-DAT01\n${image_fids}${image_bbr}${place_text}${end_line}`;

  const offset = (h.oDataPlain || []).map( (o, i)=> `${pad(i+1,4,0)},${pad(o[0],8,3,1)},${pad(o[1],7,3,1)},${pad(o[2],6,2,1)},+0.000,${o[3]},,+0000.000,+000.000\n` );
  const offset_text = offset.join("");

  const o_dat = !hasOffsets ? "" : `:O-DAT01\n${offset_text}${pad(offset.length+1,4,0)},+0000.000,+000.000,+000.00,+0.000,E,,+0000.000,+000.000`;


  const fileConstruct = `${first_line}${filePath}\n${line_opsw}${machine}${machine_op_1}${machine_op_2}${l_common}${l_board}${l_bbr}${l_recog}${l_mark}${l_setup_blank}${l_ope_blank}${l_pcb_h_blank}${l_back_pin_blank}:L-JIG\n${l_bc_blank}:L-SWITCH\n0,0,0,0,0\n:DEBUG\n1\n:B-OPE\n0,000,0\n${m_ope}:M-ASST\n01,1,1,00,00,00,00,00,00,00,00,00,00\n${m_speed_blank}${m_locate_blank}${m_noz_blank}:M-PCB-H\n01,0\n:M-BACK-PIN01\n,\n0,20\n${l_cmpnt}${feeder_blank}${tray_to_waste_blank}${p_dat}${o_dat}`

    

  if( typeof document !== 'undefined' ) {
    let link = document.createElement("a");
    link.setAttribute('download', `${filenameState}.psa`);
    link.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(fileConstruct)}`);
    document.body.appendChild(link);
    link.click();
    link.remove();

    // console.log(fileConstruct);

  }else{
    alert('document not found');
  }
}